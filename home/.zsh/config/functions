# Rails console
ccred=$(echo -e "\033[0;31m")
ccyellow=$(echo -e "\033[0;33m")
ccend=$(echo -e "\033[0m")

rc() { bundle exec rails c }

# Rails server
rs() {
  if [[ -d public/assets ]]; then
echo "${ccred}====================="
    echo "PUBLIC ASSETS EXISTS!"
    echo "=====================${ccend}"
  fi
rm -rf tmp/cache
bundle
bundle exec rails s
}

# "catcher" wechselt zwischen LOKALEM und GEM catche
# "catcher ++" erhÃ¶ht die versionsnummer um eins
catcher() {
  if [ "$1" == "++" ]; then
    if [ -e "catcher.gemspec" ]; then
      echo "in catcher:"
      CURRENTVERSION=`grep version catcher.gemspec| cut -d "." -f 3 | sed "s/\"//"`
      NEXTVERSION=`calc -p $CURRENTVERSION + 1`
      echo "Bumping gem version from $CURRENTVERSION to $NEXTVERSION"
      sed -i "" "s/\(.*\.version.*\)\.\(.*\)\"/\1.$NEXTVERSION\"/" catcher.gemspec
      echo "adding catcher.gemspec..."
      git add catcher.gemspec
      echo "make commit with message: v$NEXTVERSION..."
      git ci -am "v$NEXTVERSION"
    else
      echo "no in catcher:"
      echo "bundle update catcher"
      bundle update catcher
      echo "add Gemfile.lock to git..."
      git add Gemfile.lock
      echo "make a commit..."
      git ci -am "catcher ++"
    fi
  else
    grep -q -e "catcher.*path" Gemfile
    if [ "$?" -eq "1" ]; then
      sed -i "" "s/catcher\(.*\)/catcher\1, :path => '..\/catcher'/" Gemfile
      echo "LOCAL CATCHER"
      bundle
      rs
    else
      sed -i "" "s/catcher\(.*\), :path.*/catcher\1/" Gemfile
      echo "GEM CATCHER"
      bundle
    fi
  fi
}

# bump the gem version and push
bump() {
  POS=`grep version *.gemspec | cut -d "=" -f 2 | grep -o "\." | wc -l| awk {'print $1+2'}`
  CURRENTVERSION=`grep version *.gemspec| cut -d "." -f ${POS} | sed "s/[\"']//"`
  NEXTVERSION=`calc -p $CURRENTVERSION + 1`
  PROJECTNAME=`ls -1 *.gemspec | cut -d "." -f 1`
  echo "Bumping gem version of $PROJECTNAME from $CURRENTVERSION to $NEXTVERSION"
  sed -i "" "s/\(.*\.version.*\)\.\(.*\)\([\"']\)/\1.$NEXTVERSION\3/" *.gemspec
  CHANGED_FILES=`git status --porcelain | wc -l | awk {'print $1'}`
  if [ "$CHANGED_FILES" == "1" ]; then
    echo "adding $PROJECTNAME.gemspec..."
    git add *.gemspec
    MESSAGE="updated $PROJECTNAME version to .$NEXTVERSION"
    echo "make commit with message: $MESSAGE"
    git ci -m $MESSAGE
  fi
}
# ps + grep
psg() { ps auxww | grep $1 }

# Start pry (and load rails if available)
p() {
  if [ -f ./config/environment.rb ]; then
    pry -r ./config/environment -r ~/.zsh/modules/pry/rails.rb $1 $2 $3
  elif [ -f ./*.gemspec ]; then
    gem=`ls *.gemspec | cut -d "." -f 1`
    echo "Starting PRY with gem '$gem'"
    pry -r ./lib/$gem.rb $1 $2 $3
  else
    pry
  fi
}

b() {
  bundle "$@"
}

# run rspec via spring
rspec2() {
  if [ -f ./bin/rspec ]; then
    bin/rspec "$@"
  else
    echo "You should really 'gem install spring && spring binstub rspec' here"
    bundle exec rspec "$@"
  fi
}

# rename *.txt txt t2t
# a.txt => a.t2t
rename() {
  for f in $1; do 
    mv "$f" "${f%$2}$3"
  done
}

f() {
  find . -name "$1" | grep -v ".svn"
}

#
# quick SVN switch branch
#
switch() {
  project_name=`svn info | grep URL | cut -d "/" -f 4`

  if [[ "$0" != "0" ]]; then
    echo "================="
    echo "Not a SVN project"
    echo "================="
    return
  fi

  clean=$(svn status | wc -l)

  if [[ "$clean" -gt "0" ]]; then
    echo "=================================================================================="
    echo "The current active branch isn't clean. Commit or revert before switching branches."
    echo "=================================================================================="
    return
  fi

  branch=$1
  if [[ $branch == "" ]]; then
    branch="trunk"
  else
    branch="branches/$branch"
  fi

  echo "switching '$project_name' to $branch"

  svn switch --ignore-ancestry svn://svn/$project_name/$branch
}

prod() {
  ssh guest@$1$2.prod.blau.de
}
