# Rails console
ccred=$(echo -e "\033[0;31m")
ccyellow=$(echo -e "\033[0;33m")
ccend=$(echo -e "\033[0m")

rc() {
  bundle exec rails c
}

# Rails server
rs() {
  if [[ -d public/assets ]]; then
echo "${ccred}====================="
    echo "PUBLIC ASSETS EXISTS!"
    echo "=====================${ccend}"
  fi
#rm -rf tmp/cache
bundle
bundle exec rails s
}

# bump the gem version and push
bump() {
  POS=`grep version *.gemspec | cut -d "=" -f 2 | grep -o "\." | wc -l| awk {'print $1+2'}`
  CURRENTVERSION=`grep version *.gemspec| cut -d "." -f ${POS} | sed "s/[\"']//"`
  NEXTVERSION=`calc -p $CURRENTVERSION + 1`
  PROJECTNAME=`ls -1 *.gemspec | cut -d "." -f 1`
  echo "Bumping gem version of $PROJECTNAME from $CURRENTVERSION to $NEXTVERSION"
  sed -i "" "s/\(.*\.version.*\)\.\(.*\)\([\"']\)/\1.$NEXTVERSION\3/" *.gemspec
  CHANGED_FILES=`git status --porcelain | wc -l | awk {'print $1'}`
  if [ "$CHANGED_FILES" == "1" ]; then
    echo "adding $PROJECTNAME.gemspec..."
    git add *.gemspec
    MESSAGE="updated $PROJECTNAME version to .$NEXTVERSION"
    echo "make commit with message: $MESSAGE"
    git ci -m $MESSAGE
  fi
}

gitc() {
  echo "using branch_name: $1"
  echo "using commit_hash: $2"

  branch_name="$1"
  commit_hash="$2"

  echo "checkout branch..."
  git checkout $branch_name

  echo "cherry-pick"
  git cherry-pick $commit_hash

  echo "push..."
  gp
  echo "done!"
}

# ps + grep
psg() { ps auxww | grep $1 }

# Start pry (and load rails if available)
p() {
  if [ -f ./config/environment.rb ]; then
    pry -r ./config/environment -r ~/.zsh/modules/pry/rails.rb $1 $2 $3
  elif [ -f ./*.gemspec ]; then
    gem=`ls *.gemspec | cut -d "." -f 1`
    echo "Starting PRY with gem '$gem'"
    pry -r ./lib/$gem.rb $1 $2 $3
  else
    pry
  fi
}

b() {
  bundle "$@"
}

# rename *.txt txt t2t
# a.txt => a.t2t
rename() {
  for f in $1; do 
    mv "$f" "${f%$2}$3"
  done
}

f() {
  find . -name "$1" | grep -v ".svn"
}

#
# quick SVN switch branch
#
switch() {
  project_name=`svn info | grep URL | cut -d "/" -f 4`

  if [[ "$0" != "0" ]]; then
    echo "================="
    echo "Not a SVN project"
    echo "================="
    return
  fi

  clean=$(svn status | wc -l)

  if [[ "$clean" -gt "0" ]]; then
    echo "=================================================================================="
    echo "The current active branch isn't clean. Commit or revert before switching branches."
    echo "=================================================================================="
    return
  fi

  branch=$1
  if [[ $branch == "" ]]; then
    branch="trunk"
  else
    branch="branches/$branch"
  fi

  echo "switching '$project_name' to $branch"

  svn switch --ignore-ancestry svn://svn/$project_name/$branch
}

prod() {
  ssh guest@$1.prod.blau.de
}

share() {
echo "SERVING `pwd` ON http://`ifconfig -v en0 inet | grep inet | cut -d " " -f 2`:9090/" && ruby -r webrick -e "s = WEBrick::HTTPServer.new(:Port => 9090, :DocumentRoot => Dir.pwd); trap(\"INT\") { s.shutdown }; s.start"  
}

use() {
    SYSTEMTEST_PROPERTIES_FILE=~/.systemtest.properties
    current_host_name=`grep "^platform_host=" $SYSTEMTEST_PROPERTIES_FILE | sed s/platform_host=//`
    new_host_name=""
    if [ "$1" ]; then
        new_host_name="$1"
        echo "using $new_host_name ..."
    else
     echo -e "########################################################\nNo host name was given. '$current_host_name' is actual defined\n########################################################"
     new_host_name=$current_host_name
    fi
    sed -ie "s/$current_host_name/$new_host_name/" $SYSTEMTEST_PROPERTIES_FILE
}
